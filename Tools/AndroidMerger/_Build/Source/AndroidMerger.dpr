//
// This program was made originaly by http://grijjy.com/  (XmlMerge - Allen Drennan)
// for this article: https://blog.grijjy.com/2017/01/30/embed-facebook-sdk-for-android-in-your-delphi-mobile-app-part-2/
// Thanks also to Dave Nottage from https://delphiworlds.com/ for his help.
//

program AndroidMerger;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  Winapi.Windows,
  system.Generics.Collections,
  System.Classes,
  System.SysUtils,
  System.IOUtils,
  System.Zip,
  System.win.Registry,
  system.AnsiStrings,
  System.Hash,
  ALString,
  ALFiles,
  ALExecute,
  ALCommon,
  ALXmlDoc,
  ALStringList;

const
  AutoGeneratedSectionBeginSeparator: AnsiString = '============================================';
  AutoGeneratedSectionBeginText: AnsiString = 'AndroidMerger auto-generated section (BEGIN)';
  AutoGeneratedSectionEndSeparator: AnsiString = '==========================================';
  AutoGeneratedSectionEndText: AnsiString = 'AndroidMerger auto-generated section (END)';

{*************************************************************************}
procedure MakeAndroidManifestReady(Const AAndroidManifestFilename: String);
begin
  if not Tfile.Exists(AAndroidManifestFilename) then exit;
  Var LSrc := ALGetStringFromFile(AAndroidManifestFilename);
  Lsrc := ALStringReplace(Lsrc, '${applicationId}', 'com.embarcadero', [rfReplaceAll, RFIgnoreCase]);
  Tfile.Move(AAndroidManifestFilename, AAndroidManifestFilename + '.original');
  ALSaveStringToFile(Lsrc, AAndroidManifestFilename);
end;

{**********************************************************************************************}
procedure MergeResources(const ASrcDir: String; const ADestDir: String; const ASubPath: String);

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function _IsXmlResourceDoc(const AFileName: String; out AXmlDoc: TALXMLDocument): Boolean;
  begin
    AXmlDoc := TALXmldocument.Create('resources');
    try
      //poPreserveWhiteSpace because some nodes contain text + <node> + text
      //ex: <string name="com_facebook_smart_login_confirmation_continue_as">Continue as <ns1:g id="user name">%1$s</ns1:g></string>
      AXmlDoc.parseOptions := [poIgnoreXMLReferences, poPreserveWhiteSpace];
      AXmlDoc.LoadFromFile(AFileName);
      if AXmlDoc.DocumentElement <> nil then Result := ALSameText(AXmlDoc.DocumentElement.NodeName, 'resources')
      else begin
        ALFreeAndNil(AXmlDoc);
        Result := False;
      end;
    except
      ALFreeAndNil(AXmlDoc);
      Raise;
    end;
  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  function _nodeIsAlreadyPresent(const aNodeToAdd: TALXMLNode; const aDestXmlDoc: TALXMLDocument): boolean;
  begin
    if aNodeToAdd.Attributes['name'] = '' then begin
      if ALSameText(aNodeToAdd.NodeName, 'eat-comment') then exit(true)
      else raise Exception.Createfmt('Resource entry without name attribute'#13#10'%s',[aNodeToAdd.xml]);
    end;
    //----
    var LFoundNode := ALFindXmlNodeByNameAndAttribute(
                        aDestXmlDoc.DocumentElement, // xmlrec:TalxmlNode;
                        aNodeToAdd.NodeName, // Const NodeName: ansiString;
                        'name', aNodeToAdd.Attributes['name'], //Const AttributeName, AttributeValue: AnsiString;
                        false); // Const Recurse: Boolean = False): TalxmlNode;
    if LFoundNode = nil then exit(False);
    if LFoundNode.XML <> aNodeToAdd.xml then
      raise Exception.Createfmt('Resource entry duplicated'#13#10'%s',[aNodeToAdd.xml]);
    //----
    result := true;
  end;

begin
  if not TDirectory.Exists(ASrcDir + ASubPath) then exit;
  Var LSr: TSearchRec;
  if FindFirst(ASrcDir + ASubPath + '*.*', faAnyFile, LSr) = 0 then begin
    try
      repeat

        //if it's a directory
        if (LSr.Attr and faDirectory) > 0 then begin

          //create the same directory in ADestDir
          //and recurse this function in this directory
          if (LSr.Name <> '') and (LSr.Name[low(LSr.Name)] <> '.') then begin
            TDirectory.CreateDirectory(ADestDir + ASubPath + LSr.Name + '\');
            MergeResources(ASrcDir, ADestDir, ASubPath + LSr.Name + '\');
          end;

        end

        //if it's a file
        else begin

          //it's an resource xml file
          var LSrcXmlDoc: TALXmlDocument;
          if (TPath.GetExtension(LSr.Name).ToLower = '.xml') and
             (_IsXmlResourceDoc(ASrcDir + ASubPath + LSr.Name, LSrcXmlDoc)) then begin

            var LDestXmlDoc: TalXmlDocument;
            Try

              //-----
              Writeln('Merging ' + ASrcDir + ASubPath + LSr.Name);
              var LDestXmlFileName := ADestDir + ASubPath + LSr.Name;

              //-----
              LDestXmlDoc := TALXmldocument.Create('resources');
              //poPreserveWhiteSpace because some nodes contain text + <node> + text
              //ex: <string name="com_facebook_smart_login_confirmation_continue_as">Continue as <ns1:g id="user name">%1$s</ns1:g></string>
              LDestXmlDoc.parseOptions := [poPreserveWhiteSpace, poIgnoreXMLReferences];
              if TFile.exists(LDestXmlFileName) then LDestXmlDoc.LoadFromFile(LDestXmlFileName)
              else LDestXmlDoc.DocumentElement.ChildNodes.Add(TALXmlTextNode.Create(#13#10));

              //-----
              for Var I := 0 to LSrcXmlDoc.DocumentElement.AttributeNodes.Count - 1 do begin
                Var LSrcNode := LSrcXmlDoc.DocumentElement.AttributeNodes[i];
                var LDestNode := LDestXmlDoc.DocumentElement.AttributeNodes.FindNode(LSrcNode.NodeName);
                if LDestNode = nil then LDestXmlDoc.DocumentElement.Attributes[LSrcNode.NodeName] := LSrcNode.NodeValue
                else if LSrcNode.NodeValue <> LDestNode.NodeValue then raise Exception.Create('Merging of documentElement attributes failed!');
              end;

              //-----
              Var i := 0;
              while i <= LSrcXmlDoc.DocumentElement.ChildNodes.Count - 1 do begin
                var LSrcNode := LSrcXmlDoc.DocumentElement.ChildNodes[i];
                if (LSrcNode.NodeType = ntElement) and (not _nodeIsAlreadyPresent(LSrcNode, LDestXmlDoc)) then begin
                  LDestXmlDoc.DocumentElement.ChildNodes.Add(TALXmlTextNode.Create('    '));
                  LDestXmlDoc.DocumentElement.ChildNodes.Add(LSrcXmlDoc.DocumentElement.ChildNodes.Extract(i));
                  LDestXmlDoc.DocumentElement.ChildNodes.Add(TALXmlTextNode.Create(#13#10));
                end
                else
                  inc(i);
              end;

              //-----
              LDestXmlDoc.SaveToFile(LDestXmlFileName);

            finally
              ALFreeAndNil(LSrcXmlDoc);
              ALFreeAndNil(LDestXmlDoc);
            End;

          end

          // not xml that we can merge so just copy the file
          else begin
            Writeln('Copying ' + ASrcDir + ASubPath + LSr.Name);
            TFile.Copy(
              ASrcDir + ASubPath + LSr.Name,
              ADestDir + ASubPath + LSr.Name); // << Raise an Exception if the file already exist
          end;

        end;

      until FindNext(LSr) <> 0;
    finally
      FindClose(LSr);
    end;
  end;
end;

{*****************************}
procedure MergeAndroidManifest(
            const ASrcFilename: String;
            const ADestXmlDoc: TalXmlDocument;
            const AForceDisabledXmlDoc: TalXmlDocument);

var
  LPackageName: AnsiString;
  LPackageNameAddedInsideDocumentElementNode: Boolean;
  LPackageNameAddedInsideApplicationNode: Boolean;

  {~~~~~~~~~~~~~~~~~~~~~}
  Function _getOwnerNode(
             const AOwnerDoc: TalXmlDocument;
             const AInsideApplicationNode: Boolean): TalXmlNode;
  begin
    if AInsideApplicationNode then result := AOwnerDoc.DocumentElement.ChildNodes.FindNode('application')
    else result := AOwnerDoc.DocumentElement;
    if result = nil then raise Exception.Create('Broken AndroidManifest file');
  end;

  {~~~~~~~~~~~~~~~~~~~~~~~}
  function _IsNodePresent(
             const AOwnerDoc: TalXmlDocument;
             const ANode: TALXmlNode;
             const aKeyAttributeName: AnsiString;
             const aKeyAttributeValue: AnsiString;
             const AInsideApplicationNode: Boolean): Boolean;
  begin
    var LOwnerNode := _getOwnerNode(AOwnerDoc, AInsideApplicationNode);
    if aKeyAttributeName = '' then result := LOwnerNode.ChildNodes.FindNode(ANode.NodeName) <> nil
    else result := LOwnerNode.ChildNodes.FindNode(ANode.NodeName, [aKeyAttributeName+'='+aKeyAttributeValue]) <> nil
  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  procedure _AddPackageNameCommentToDestXmlDoc(const AInsideApplicationNode: Boolean);
  begin
    var LOwnerNode := _getOwnerNode(ADestXmlDoc, AInsideApplicationNode);
    if ((not AInsideApplicationNode) and (not LPackageNameAddedInsideDocumentElementNode)) or
       ((AInsideApplicationNode) and (not LPackageNameAddedInsideApplicationNode)) then begin
      Var LBreakLineNode := TALXmlElementNode.Create('br');
      LOwnerNode.ChildNodes.Add(LBreakLineNode);
      LOwnerNode.ChildNodes.Add(TALXmlCommentNode.Create(' '+LPackageName+' '));
      if not AInsideApplicationNode then LPackageNameAddedInsideDocumentElementNode := true
      else LPackageNameAddedInsideApplicationNode := true;
      LOwnerNode.ChildNodes.remove(LBreakLineNode);
    end;
  end;

  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}
  procedure _AddNodeToDestXmlDoc(
              const ANode: TALXmlNode;
              const aKeyAttributeName: AnsiString;
              const aKeyAttributeValue: AnsiString;
              const AInsideApplicationNode: Boolean);
  begin

    //init LForceDisabled and LDisabled
    var LDisabled := _IsNodePresent(
                       ADestXmlDoc,
                       ANode,
                       aKeyAttributeName,
                       aKeyAttributeValue,
                       AInsideApplicationNode);
    Var LForceDisabled := _IsNodePresent(
                            AForceDisabledXmlDoc,
                            ANode,
                            aKeyAttributeName,
                            aKeyAttributeValue,
                            AInsideApplicationNode);

    //add the packagename
    _AddPackageNameCommentToDestXmlDoc(AInsideApplicationNode);

    //update the aNode
    var LOwnerNode := _getOwnerNode(ADestXmlDoc, AInsideApplicationNode);
    if LForceDisabled then LOwnerNode.ChildNodes.Add(TALXmlCommentNode.Create(' !! '+ANode.XML+' !! '))
    else if LDisabled then LOwnerNode.ChildNodes.Add(TALXmlCommentNode.Create(' '+ANode.XML+' '))
    else LOwnerNode.ChildNodes.Add(ANode);

  end;


begin
  if not Tfile.Exists(ASrcFilename) then exit;
  Writeln('Merging ' + ASrcFilename);

  //load the document
  Var LSrcXmlDoc := TALXmlDocument.Create;
  Try

    //-----
    LSrcXmlDoc.Options := [doNodeAutoIndent];
    var LSrcContent := ALgetStringFromFile(ASrcFilename);
    LSrcContent := ALStringReplace(LSrcContent, '${applicationId}', '%package%', [rfReplaceAll, RfIgnoreCase]);
    LSrcXmlDoc.LoadFromXML(LSrcContent);
    LPackageName := LSrcXmlDoc.DocumentElement.Attributes['package'];
    LPackageNameAddedInsideDocumentElementNode := False;
    LPackageNameAddedInsideApplicationNode := False;

    //-----
    while LSrcXmlDoc.DocumentElement.ChildNodes.Count > 0 do begin
      var LDocumentElementSrcNode := LSrcXmlDoc.DocumentElement.ChildNodes.Extract(0);
      if (LDocumentElementSrcNode.NodeType = ntElement) then begin

        //<uses-sdk ... />
        if ALSameText(LDocumentElementSrcNode.NodeName, 'uses-sdk') then begin
          _AddNodeToDestXmlDoc(
            LDocumentElementSrcNode, // const ANode: TALXmlNode;
            '', // const aKeyAttributeName: AnsiString;
            '', // const aKeyAttributeValue: AnsiString;
            false); // const AInsideApplicationNode: Boolean
        end

        //<uses-permission android:name="string" ... />
        else if ALSameText(LDocumentElementSrcNode.NodeName, 'uses-permission') then begin
          _AddNodeToDestXmlDoc(
            LDocumentElementSrcNode, // const ANode: TALXmlNode;
            'android:name', // const aKeyAttributeName: AnsiString;
            LDocumentElementSrcNode.Attributes['android:name'] , // const aKeyAttributeValue: AnsiString;
            false); // const AInsideApplicationNode: Boolean
        end

        //<permission android:name="string" ... />
        else if ALSameText(LDocumentElementSrcNode.NodeName, 'permission') then begin
          _AddNodeToDestXmlDoc(
            LDocumentElementSrcNode, // const ANode: TALXmlNode;
            'android:name', // const aKeyAttributeName: AnsiString;
            LDocumentElementSrcNode.Attributes['android:name'] , // const aKeyAttributeValue: AnsiString;
            false); // const AInsideApplicationNode: Boolean
        end

        //<application ... >
        else if ALSameText(LDocumentElementSrcNode.NodeName, 'application') then begin

          //add the comment about the application attributes that we ignored
          if LDocumentElementSrcNode.AttributeNodes.Count > 0 then begin
            _AddPackageNameCommentToDestXmlDoc(true); // const AInsideApplicationNode: Boolean
            var LCommentStr: ansiString := 'application';
            for var I := 0 to LDocumentElementSrcNode.AttributeNodes.Count - 1 do
              LCommentStr := LCommentStr + ' ' + LDocumentElementSrcNode.AttributeNodes[i].NodeName + '="' + LDocumentElementSrcNode.AttributeNodes[i].NodeValue +'"';
            var LOwnerNode := _getOwnerNode(ADestXmlDoc, true{AInsideApplicationNode});
            LOwnerNode.ChildNodes.Add(TALXmlCommentNode.Create(' '+LCommentStr+' '));
          end;

          //loop throught all childs
          while LDocumentElementSrcNode.ChildNodes.Count > 0 do begin
            var LApplicationSrcNode := LDocumentElementSrcNode.ChildNodes.Extract(0);
            if (LApplicationSrcNode.NodeType = ntElement) then begin

              //<meta-data android:name="string" ... />
              if ALSameText(LApplicationSrcNode.NodeName, 'meta-data') then begin
                _AddNodeToDestXmlDoc(
                  LApplicationSrcNode, // const ANode: TALXmlNode;
                  'android:name', // const aKeyAttributeName: AnsiString;
                  LApplicationSrcNode.Attributes['android:name'], // const aKeyAttributeValue: AnsiString;
                  true); // const AInsideApplicationNode: Boolean
              end

              //<activity android:name="string" ... />
              else if ALSameText(LApplicationSrcNode.NodeName, 'activity') then begin
                _AddNodeToDestXmlDoc(
                  LApplicationSrcNode, // const ANode: TALXmlNode;
                  'android:name', // const aKeyAttributeName: AnsiString;
                  LApplicationSrcNode.Attributes['android:name'], // const aKeyAttributeValue: AnsiString;
                  true); // const AInsideApplicationNode: Boolean
              end

              //<provider android:name="string" ... />
              else if ALSameText(LApplicationSrcNode.NodeName, 'provider') then begin
                _AddNodeToDestXmlDoc(
                  LApplicationSrcNode, // const ANode: TALXmlNode;
                  'android:name', // const aKeyAttributeName: AnsiString;
                  LApplicationSrcNode.Attributes['android:name'], // const aKeyAttributeValue: AnsiString;
                  true); // const AInsideApplicationNode: Boolean
              end

              //<receiver android:name="string" ... />
              else if ALSameText(LApplicationSrcNode.NodeName, 'receiver') then begin
                _AddNodeToDestXmlDoc(
                  LApplicationSrcNode, // const ANode: TALXmlNode;
                  'android:name', // const aKeyAttributeName: AnsiString;
                  LApplicationSrcNode.Attributes['android:name'], // const aKeyAttributeValue: AnsiString;
                  true); // const AInsideApplicationNode: Boolean
              end

              //<service android:name="string" ... />
              else if ALSameText(LApplicationSrcNode.NodeName, 'service') then begin
                _AddNodeToDestXmlDoc(
                  LApplicationSrcNode, // const ANode: TALXmlNode;
                  'android:name', // const aKeyAttributeName: AnsiString;
                  LApplicationSrcNode.Attributes['android:name'], // const aKeyAttributeValue: AnsiString;
                  true); // const AInsideApplicationNode: Boolean
              end

              //Unknown node
              else
                raise Exception.Createfmt('Unknown node. Please update the source code'#13#10'%s', [LApplicationSrcNode.XML]);

            end
            else
              ALFreeAndNil(LApplicationSrcNode);
          end;

        end

        //Unknown node
        else
          raise Exception.Createfmt('Unknown node. Please update the source code'#13#10'%s', [LDocumentElementSrcNode.XML]);

      end
      else
        ALFreeAndNil(LDocumentElementSrcNode);
    end;

  Finally
    ALfreeAndNil(LSrcXmlDoc);
  End;
end;

{*******************************************************}
procedure ExtractAutoGeneratedSectionFromAndroidManifest(
            var AAndroidManifestXmlScr: AnsiString;
            Out AManifestSection: AnsiString;
            Out AApplicationSection: AnsiString);
begin
  AManifestSection := '';
  AApplicationSection := '';
  for var I := 1 to 3 do begin
    var LApplicationStartPos := ALpos('<application', AAndroidManifestXmlScr);
    var LApplicationEndPos := ALpos('</application>', AAndroidManifestXmlScr);
    if LApplicationEndPos <= LApplicationStartPos then raise Exception.Create('Broken AndroidManifest file');
    Var P1 := ALpos('<!-- '+AutoGeneratedSectionBeginSeparator+' -->', AAndroidManifestXmlScr);
    if P1 <= 0 then exit;
    if i = 3 then raise Exception.Create('Error C34FEAEC-A746-4C92-944C-8BB6B6DD73C8');
    while (P1 > low(AAndroidManifestXmlScr)) and (AAndroidManifestXmlScr[P1-1] = ' ') do dec(P1);
    Var P2 := ALpos('<!-- '+AutoGeneratedSectionEndSeparator+' -->', AAndroidManifestXmlScr);
    if P2 <= 0 then raise Exception.Create('Error 21FB860F-1155-4B0C-B7D1-AAE4D557A410');
    P2 := ALposEx('<!-- '+AutoGeneratedSectionEndSeparator+' -->', AAndroidManifestXmlScr, P2 + 1);
    if P2 <= 0 then raise Exception.Create('Error 21FB860F-1155-4B0C-B7D1-AAE4D557A410');
    P2 := P2 + length('<!-- '+AutoGeneratedSectionEndSeparator+' -->');
    while (P2 <= high(AAndroidManifestXmlScr)) and (AAndroidManifestXmlScr[P2] in [#13,#10]) do inc(P2);
    if (P1 > LApplicationStartPos) and (P1 < LApplicationEndPos) then AApplicationSection := ALtrim(ALCopyStr(AAndroidManifestXmlScr, P1, P2-P1))
    else AManifestSection := ALtrim(ALCopyStr(AAndroidManifestXmlScr, P1, P2-P1));
    delete(AAndroidManifestXmlScr, P1, P2-P1);
  end;
end;

{***************************************************}
procedure AddAutoGeneratedSectionFromAndroidManifest(
            var AAndroidManifestXmlScr: AnsiString;
            const AManifestSection: AnsiString;
            const AApplicationSection: AnsiString);
begin
  var LtmpManifestSection: AnsiString;
  var LtmpApplicationSection: AnsiString;
  ExtractAutoGeneratedSectionFromAndroidManifest(
    AAndroidManifestXmlScr, // var AAndroidManifestXmlScr: AnsiString;
    LtmpManifestSection, // Out AManifestSection: AnsiString;
    LtmpApplicationSection); // Out AApplicationSection: AnsiString);
  var LApplicationStartPos := ALpos('<application', AAndroidManifestXmlScr);
  var LApplicationEndPos := ALpos('</application>', AAndroidManifestXmlScr);
  if LApplicationEndPos <= LApplicationStartPos then raise Exception.Create('Broken AndroidManifest file');
  while (LApplicationStartPos > low(AAndroidManifestXmlScr)) and (AAndroidManifestXmlScr[LApplicationStartPos-1] in [#9,#32]) do dec(LApplicationStartPos);
  insert('  ' + AManifestSection + #13#10#13#10, AAndroidManifestXmlScr, LApplicationStartPos);
  inc(LApplicationEndPos, length('  ') + length(AManifestSection) + length(#13#10#13#10));
  while (LApplicationEndPos > low(AAndroidManifestXmlScr)) and (AAndroidManifestXmlScr[LApplicationEndPos-1] in [#9,#32]) do dec(LApplicationEndPos);
  insert('    ' + AApplicationSection + #13#10#13#10, AAndroidManifestXmlScr, LApplicationEndPos);
end;


{***********************************************}
Procedure ExecuteCmdLine(const ACmdLine: String);
begin
  Var LInputStream := TMemorystream.Create;
  Var LOutputStream := TStringStream.Create;
  try
    Writeln('Execute ' + ACmdLine);
    Var LCmdLineResult := ALWinExecU(
                            ACmdLine, // const aCommandLine: String;
                            LInputStream, // const aInputStream: Tstream;
                            LOutputStream); //const aOutputStream: TStream;
    if LOutputStream.DataString <> '' then writeln(LOutputStream.DataString);
    if LCmdLineResult <> 0 then
      raise Exception.Createfmt('Failed to execute %s', [ACmdLine]);
  finally
    ALFreeandNil(LInputStream);
    ALFreeandNil(LOutputStream);
  end;
end;

{*********************}
procedure CreateRFlata(
            const AMergedResDir: String;
            const ARFlataFilename: String;
            const AAaptFilename: String);
begin
  If Tfile.Exists(ARFlataFilename) then TFile.Delete(ARFlataFilename);
  var LCmdLine := '"'+AAaptFilename+'" '+
                  'compile '+ // Compiles resources to be linked into an apk.
                  '--dir  "'+ALExcludeTrailingPathDelimiterU(AMergedResDir)+'" '+ // Directory to scan for resources
                  '-o "'+ARFlataFilename+'"'; // Output path
  ExecuteCmdLine(LCmdLine);
end;

{***********************}
procedure CreateRClasses(
            const ALibDir: String;
            const AMergedResDir: String;
            const ATmpDir: String;
            const ARJavaDir: String;
            const ARClassDir: String;
            const AAaptFilename: String;
            const ASDKApiLevelJarFilename: String;
            const AJavacFilename: String);
begin

  //check params
  if not TFile.exists(ALibDir + 'R.txt') then exit; // R.txt seam mandatory, https://stackoverflow.com/questions/73905260/what-the-purpose-of-the-r-txt-file-inside-aar
  if Tfile.GetSize(ALibDir + 'R.txt') = 0 then exit;  // sometime R.txt is just empty
  if not TFile.exists(ALibDir + 'AndroidManifest.xml') then exit; // AndroidManifest.xml is mandatory
  if Not TDirectory.Exists(ARJavaDir) then raise EALException.CreateFmt('Directory %s does not exist', [ARJavaDir]);
  if not AlEmptyDirectoryU(ARJavaDir, true{SubDirectory}) then raise EALException.CreateFmt('Cannot clear %s', [ARJavaDir]);

  //init LisAapt2
  var LisAapt2 := AlPosExIgnoreCaseU('aapt2.exe', AAaptFilename) > 0;

  //Create R.java
  var LCmdLine: String;
  if LisAapt2 then begin
    var LOutputPath := ATmpDir + 'linked_res.ap_';
    if Tfile.Exists(LOutputPath) then Tfile.Delete(LOutputPath);
    LCmdLine := '"'+AAaptFilename+'" '+
                'link '+ // Links resources into an apk.
                '--manifest "'+ALibDir+'AndroidManifest.xml" '+ // Path to the Android manifest to build.
                '-o "'+LOutputPath+'" '+ // Output path.
                '-I "'+ALExcludeTrailingPathDelimiterU(ASDKApiLevelJarFilename)+'" '+ // Adds an Android APK to link against.
                '-R "'+ALExcludeTrailingPathDelimiterU(AMergedResDir)+'" '+ // Compilation unit to link, using `overlay` semantics. The last conflicting resource given takes precedence.
                '--java "'+ALExcludeTrailingPathDelimiterU(ARJavaDir)+'" '+ // Directory in which to generate R.java.
                '--auto-add-overlay'; // Allows the addition of new resources in overlays without <add-resource> tags.
  end
  else begin
    LCmdLine := '"'+AAaptFilename+'" '+
                'package '+ // Package the android resources.  It will read assets and resources that are supplied with the -M -A -S or raw-files-dir arguments.  The -J -P -F and -R options control which files are output.
                '-f '+ // force overwrite of existing files
                '-m '+ // make package directories under location specified by -J
                '-M "'+ALibDir+'AndroidManifest.xml" '+ // specify full path to AndroidManifest.xml to include in zip
                '-I "'+ALExcludeTrailingPathDelimiterU(ASDKApiLevelJarFilename)+'" '+ // add an existing package to base include set
                '-S "'+ALExcludeTrailingPathDelimiterU(AMergedResDir)+'" '+ // directory in which to find resources.  Multiple directories will be scanned and the first match found (left to right) will take precedence.
                '-J "'+ALExcludeTrailingPathDelimiterU(ARJavaDir)+'" '+ // specify where to output R.java resource constant definitions
                '--auto-add-overlay'; // Automatically add resources that are only in overlays.
  end;
  ExecuteCmdLine(LCmdLine);

  //get all R.java
  var LRJavaFiles := TDirectory.GetFiles(
                       ARJavaDir, //const Path,
                       '*.java', // SearchPattern: string;
                       TSearchOption.soAllDirectories); // const SearchOption: TSearchOption)
  if length(LRJavaFiles) <> 1 then
    raise Exception.Create('Error #46B94E76-4237-4420-913A-24054015B5DB');

  //load the r.txt
  var LRTxt := ALTrim(ALGetStringFromFile(ALibDir + 'R.txt'));

  //clear the R.java
  Var LRJavaSrc := ALGetStringFromFile(LRJavaFiles[0]);
  //
  Var P1 := Alpos('/*', LRJavaSrc);
  while P1 > 0 do begin
    Var P2 := Alpos('*/', LRJavaSrc);
    if P2 <= P1 then raise Exception.Create('Error E0091FB6-E774-4F7A-8EF2-DFC518C8D706');
    delete(LRJavaSrc,P1,P2-P1+2);
    P1 := Alpos('/*', LRJavaSrc);
  end;
  //
  Var LLst := TALStringList.Create;
  try
    LLst.Text := LRJavaSrc;
    var LCurrentClassName: AnsiString := '';
    Var I := 0;
    while i <= LLst.Count - 1 do begin
      Var LLine := ALTrim(LLst[i]);
      //--
      if LLine = '' then begin
        LLst.Delete(i);
        Continue;
      end;
      //--
      P1 := ALpos(' class ', LLine); // public static final class anim {
      if P1 > 0 then begin
        LCurrentClassName := ALcopyStr(LLine,P1 + length(' class '), MaxInt); // anim {
        LCurrentClassName := ALStringReplace(LCurrentClassName,'{', '', []);  // anim
        LCurrentClassName := ALTrim(LCurrentClassName); // anim
        inc(i);
        continue;
      end;
      //--
      P1 := ALpos('=',LLine); // public static final int[] ViewStubCompat = {
                              //   0x010100d0, 0x010100f2, 0x010100f3
                              // };
      if P1 > 0 then begin
        Var LcurrentResName := ALtrim(ALcopyStr(LLine,1,P1-1)); // public static final int[] ViewStubCompat
        P1 := Length(LcurrentResName);
        while (P1 > 0) and (LCurrentResName[P1] <> ' ') do
          dec(P1);
        if P1 <= 0 then raise Exception.Create('Error B5092859-B647-46EA-98B4-6269C1FFD073');
        LcurrentResName := ALTrim(ALcopyStr(LcurrentResName,P1+1,maxint)); // ViewStubCompat
        if LCurrentClassName = '' then raise Exception.Create('Error C7A6C3AC-621C-4AB4-AA64-88E3E3A1B9DE');
        if ALpos(' ' + LCurrentClassName + ' ' + LcurrentResName + ' ', LRTxt) <= 0 then begin // int attr actionBarSplitStyle 0x7f040005
          while ALpos(';', LLst[i]) <= 0 do
            LLst.Delete(i);
          LLst.Delete(i);
          Continue;
        end;
      end;
      //--
      inc(i);
    end;
    //
    I := 0;
    while i <= LLst.Count - 1 do begin
      Var LLine := ALTrim(LLst[i]);
      P1 := ALpos(' class ', LLine); // public static final class anim {
      if P1 > 0 then begin
        if i = LLst.Count - 1 then raise Exception.Create('Error 91042CCE-06C8-4D6A-9F45-EA7B27CFE836');
        if ALtrim(LLst[i+1]) = '}' then begin
          LLst.Delete(i);
          LLst.Delete(i);
          continue;
        end;
      end;
      inc(i);
    end;
    //
    LRJavaSrc := ALTrim(LLst.Text);
  finally
    ALFreeAndNil(LLst);
  end;
  //
  ALSaveStringToFile(LRJavaSrc, LRJavaFiles[0]);

  //check if we have the same amout of items in R.java and in R.txt
  if length(LRJavaSrc) - length(ALStringReplace(LRJavaSrc, ';', '', [RfIgnoreCase])) <> length(LRTxt) - length(ALStringReplace(LRTxt, #10, '', [RfIgnoreCase])) then
    raise Exception.Create('Error 649F370C-226C-4D8D-85C9-B1CE17860EA4');

  //Compile R.java into R$ classes
  LCmdLine := '"'+AJavacFilename+'" '+
              '-d "'+ALExcludeTrailingPathDelimiterU(ARClassDir)+'" '+  // Specify where to place generated class files
              '"'+LRJavaFiles[0]+'"'; // input source files
  ExecuteCmdLine(LCmdLine);

end;

{*******************}
procedure CreateRJar(
            const aRJarFilename: String;
            const ARClassDir: String;
            const AJarExeFilename: String);
begin
  If Tfile.Exists(aRJarFilename) then raise Exception.Create('Error 78978F68-66EB-4152-BDF9-35EA5C853E02');
  var LCmdLine := '"'+AJarExeFilename+'" '+
                  'cfM '+ // -c  create new archive -f  specify archive file name
                  '"'+aRJarFilename+'" '+
                  '-C "'+ALExcludeTrailingPathDelimiterU(ARClassDir)+'" .';
  ExecuteCmdLine(LCmdLine);
end;



begin
  try

    {$IFDEF DEBUG}
    ReportMemoryleaksOnSHutdown := True;
    {$ENDIF}
    SetMultiByteConversionCodePage(CP_UTF8);

    //Retrieve delphi configuration
    Var LAaptFilename: String := '';  // C:\SDKs\android\build-tools\32.0.0\aapt.exe
    Var LAapt2Filename: String := ''; // C:\SDKs\android\build-tools\32.0.0\aapt2.exe
    Var LSDKApiLevelDir: String := ''; // C:\SDKs\android\platforms\android-32\
    Var LSDKApiLevelJarFilename: String := ''; // C:\SDKs\android\platforms\android-32\android.jar
    var LJDKDir: String := ''; // C:\Program Files\Eclipse Adoptium\jdk-11.0.16.101-hotspot\
    var LJavacFilename: String := ''; // C:\Program Files\Eclipse Adoptium\jdk-11.0.16.101-hotspot\bin\javac.exe
    var LJarExeFilename: String := ''; // C:\Program Files\Eclipse Adoptium\jdk-11.0.16.101-hotspot\bin\jar.exe
    var LRegistry := TRegistry.Create;
    try
      LRegistry.RootKey:=HKEY_CURRENT_USER;
      if not LRegistry.OpenKeyReadOnly('SOFTWARE\Embarcadero\BDS') then
        raise Exception.Create('Could not find Embarcadero Delphi Registry');
      var LSubKeyNames := TStringList.Create;
      Try
        LRegistry.GetKeyNames(LSubKeyNames);
        var LCompilerVersionStr: String := '';
        var LCompilerVersionFloat: Double := 0;
        for var LName in LSubKeyNames do begin
          var LTmpCompilerVersionFloat := ALStrToFloatDefU(LName, 0, ALDefaultFormatSettingsU);
          if LTmpCompilerVersionFloat > LCompilerVersionFloat then begin
            LCompilerVersionStr := LName;
            LCompilerVersionFloat := LTmpCompilerVersionFloat;
          end;
        end;
        if LCompilerVersionStr = '' then raise Exception.Create('Incorrect Embarcadero Delphi Registry');
        LRegistry.CloseKey;
        if not LRegistry.OpenKeyReadOnly('SOFTWARE\Embarcadero\BDS\'+LCompilerVersionStr+'\PlatformSDKs') then
          raise Exception.Create('Their is no platform SDK Configured');
        Var LPlatformSDKName := LRegistry.ReadString('Default_Android64');
        if LPlatformSDKName = '' then LPlatformSDKName := LRegistry.ReadString('Default_Android');
        if LPlatformSDKName = '' then raise Exception.Create('Their is no default Android platform SDK Configured');
        LRegistry.CloseKey;
        if not LRegistry.OpenKeyReadOnly('SOFTWARE\Embarcadero\BDS\'+LCompilerVersionStr+'\PlatformSDKs\'+LPlatformSDKName) then
          raise Exception.Create('Incorrect Embarcadero Delphi Registry');
        LAaptFilename := LRegistry.ReadString('SDKAaptPath');
        if LAaptFilename = '' then raise Exception.Create('SDKAaptPath is not configured');
        if not TFile.exists(LAaptFilename) then raise Exception.CreateFmt('%s does not exist', [LAaptFilename]);
        LAapt2Filename := ALStringReplaceU(LAaptFilename, 'aapt.exe', 'aapt2.exe', [rfIgnoreCase]);
        if not TFile.exists(LAapt2Filename) then raise Exception.CreateFmt('%s does not exist', [LAapt2Filename]);
        LSDKApiLevelDir := LRegistry.ReadString('SDKApiLevelPath');
        if not TDirectory.Exists(LSDKApiLevelDir) then raise Exception.CreateFmt('Directory %s does not exist', [LSDKApiLevelDir]);
        LSDKApiLevelDir := ALIncludeTrailingPathDelimiterU(LSDKApiLevelDir, '\');
        LSDKApiLevelJarFilename := LSDKApiLevelDir + 'android.jar';
        if not TFile.exists(LSDKApiLevelJarFilename) then raise Exception.CreateFmt('%s does not exist', [LSDKApiLevelJarFilename]);
        LJDKDir := LRegistry.ReadString('JDKPath');
        if not TDirectory.Exists(LJDKDir) then raise Exception.CreateFmt('Directory %s does not exist', [LJDKDir]);
        LJDKDir := ALIncludeTrailingPathDelimiterU(LJDKDir, '\');
        LJavacFilename := LJDKDir + 'bin\javac.exe';
        if not TFile.exists(LJavacFilename) then raise Exception.CreateFmt('%s does not exist', [LJavacFilename]);
        LJarExeFilename := LJDKDir + 'bin\jar.exe';
        if not TFile.exists(LJarExeFilename) then raise Exception.CreateFmt('%s does not exist', [LJarExeFilename]);
      Finally
        ALFreeAndNil(LSubKeyNames);
      End;
    finally
      ALFreeAndNil(LRegistry);
    end;

    //Create the tmp dir
    Var LtmpDirectory := ALGetModulePathU + 'tmp\';
    TDirectory.CreateDirectory(LtmpDirectory);
    if not AlEmptyDirectoryU(LtmpDirectory, true{SubDirectory}) then raise EALException.CreateFmt('Cannot clear %s', [LtmpDirectory]);
    try

      //create the LtmpDirectoryLibraries
      var LtmpDirectoryLibraries := LtmpDirectory + 'Libraries\';
      TDirectory.CreateDirectory(LtmpDirectoryLibraries);

      //create the LtmpDirectoryRJava
      var LtmpDirectoryRJava := LtmpDirectory + 'RJava\';
      TDirectory.CreateDirectory(LtmpDirectoryRJava);

      //create the LtmpDirectoryRClass
      var LtmpDirectoryRClass := LtmpDirectory + 'RClass\';
      TDirectory.CreateDirectory(LtmpDirectoryRClass);

      //create the LRFlataFilename
      var LRFlataFilename := LtmpDirectory + 'compiled_res.flata';

      //create local objects
      var LParamLst := TALStringListU.Create;
      Var LLibraries := TALStringListU.Create;
      var LConfigs := TALStringList.Create;
      var LPlatforms := TALStringList.Create;
      try

        //update LParamLst
        for var I := 1 to ParamCount do
          LParamLst.Add(ParamStr(i));

        //Init LNoInteraction
        var LNoInteraction := AlStrToBoolU(ALTrimU(LParamLst.Values['-NoInteraction']));

        //Init LLibraries
        LLibraries.LineBreak := ';';
        LLibraries.Text := LParamLst.Values['-Libraries'];
        if LLibraries.Count = 0 then raise Exception.Create('Libraries param is mandatory');
        for var I := 0 to LLibraries.Count - 1 do
          LLibraries[i] := LLibraries[i] + LLibraries.NameValueSeparator + ALExtractFileNameU(LLibraries[i], true{RemoveFileExt});

        //init LOutputDir
        var LOutputDir := ALTrimU(LParamLst.Values['-OutputDir']);
        if LOutputDir = '' then raise Exception.Create('OutputDir param is mandatory');
        LOutputDir := ALIncludeTrailingPathDelimiterU(LOutputDir, '\');
        if TDirectory.Exists(LOutputDir) then begin
          if (not LNoInteraction) then begin
            Write('Empty '+ LOutputDir + ' (Y/N)? ');
            Var LAnswer: String;
            ReadLn(LAnswer);
            if not ALSameTextU(LAnswer, 'Y') then begin
              Writeln('');
              Writeln('Press any key to exit');
              Readln;
              exit;
            end;
          end;
          if not AlEmptyDirectoryU(LOutputDir, true{SubDirectory}) then raise EALException.CreateFmt('Cannot clear %s', [LOutputDir]);
        end;
        TDirectory.CreateDirectory(LOutputDir);

        //Init LLibsOutputDir
        var LLibsOutputDir := LOutputDir + 'libs\';
        TDirectory.CreateDirectory(LLibsOutputDir);

        //Init LJniOutputDir
        var LjniOutputDir := LOutputDir + 'jni\';
        TDirectory.CreateDirectory(LjniOutputDir);

        //Init LResOutputDir
        var LresOutputDir := LOutputDir + 'res\';
        TDirectory.CreateDirectory(LresOutputDir);

        //Init LAndroidManifest
        var LAndroidManifest := ALTrimU(LParamLst.Values['-AndroidManifest']);

        //Init DProj
        var LDProjFilename := ALTrimU(LParamLst.Values['-DProj']);
        if LDProjFilename = '' then raise Exception.Create('DProj param is mandatory');
        var LDProjDir := ALExtractFilePathU(LDProjFilename);

        //Init LConfigs
        LConfigs.LineBreak := ';';
        LConfigs.Text := AnsiString(LParamLst.Values['-Configurations']);
        if LConfigs.Count = 0 then begin
          LConfigs.Add('Debug');
          LConfigs.Add('Release');
        end;

        //Init LPlatforms
        LPlatforms.LineBreak := ';';
        LPlatforms.Text := AnsiString(LParamLst.Values['-Platforms']);
        if LPlatforms.Count = 0 then begin
          LPlatforms.Add('Android');
          LPlatforms.Add('Android64');
        end;

        //init LDProjNormalizer
        var LDProjNormalizer := ALTrimU(LParamLst.Values['-DProjNormalizer']);

        //init LRJarSwapper
        var LRJarSwapper := ALTrimU(LParamLst.Values['-RJarSwapper']);

        //Uncompress all AAR libraries
        for var I := 0 to LLibraries.Count - 1 do begin
          var LLibrary := LLibraries.Names[i];
          Var LDestDir := LtmpDirectoryLibraries+LLibraries.ValueFromIndex[i]+'\';
          Writeln('Uncompress '+LLibrary);
          if TDirectory.Exists(LLibrary) then begin
            if not AlCopyDirectoryU(
                     LLibrary, // SrcDirectory,
                     LDestDir, // DestDirectory: ansiString;
                     true) then // SubDirectory: Boolean;
              raise Exception.Createfmt('Cannot copy %s to %s', [LLibrary, LDestDir]);
          end
          else if TFile.exists(LLibrary) then begin
            if TZipFile.IsValid(LLibrary) then TZipFile.ExtractZipFile(LLibrary, LDestDir, nil)
            else raise Exception.CreateFmt('Invalid aar file: %s', [LLibrary]);
          end
          else raise Exception.CreateFmt('Unknown library: %s', [LLibrary]);
        end;

        //copy all jars
        for var I := 0 to LLibraries.Count - 1 do begin
          var LJarFiles := TDirectory.GetFiles(LtmpDirectoryLibraries + LLibraries.ValueFromIndex[i], '*.jar', TSearchOption.soTopDirectoryOnly);
          if length(LJarFiles) = 0 then continue;
          if length(LJarFiles) > 1 then raise Exception.Create('Their cannot be more than one jar at the root of a library');
          Tfile.Copy(LJarFiles[0], LLibsOutputDir + LLibraries.ValueFromIndex[i] + '.jar');
          if Tdirectory.Exists(LtmpDirectoryLibraries + LLibraries.ValueFromIndex[i] + '\libs') then begin
            var LlibsFiles := TDirectory.GetFiles(LtmpDirectoryLibraries + LLibraries.ValueFromIndex[i] + '\libs', '*', TSearchOption.soAllDirectories);
            for var J := Low(LlibsFiles) to High(LlibsFiles) do begin
              if not ALSameTextU(ALExtractFileExtU(LlibsFiles[j]), '.jar') then raise Exception.Create('Error 1BE76D9D-49BC-4CA7-971C-40B81C01B1C9');
              Tfile.Copy(LlibsFiles[j], LLibsOutputDir + ALExtractFileNameU(LlibsFiles[j]));
            end;
          end;
        end;

        //copy all jni
        for var I := 0 to LLibraries.Count - 1 do begin
          if Tdirectory.Exists(LtmpDirectoryLibraries + LLibraries.ValueFromIndex[i] + '\jni\arm64-v8a') then begin
            var LJniFiles := TDirectory.GetFiles(LtmpDirectoryLibraries + LLibraries.ValueFromIndex[i] + '\jni\arm64-v8a', '*', TSearchOption.soAllDirectories);
            for var J := Low(LJniFiles) to High(LJniFiles) do begin
              if not ALSameTextU(ALExtractFileExtU(LJniFiles[j]), '.so') then raise Exception.Create('Error 2FCFB6D0-987A-40EC-BBAC-66D5ADC50DC2');
              TDirectory.CreateDirectory(LJniOutputDir + '\arm64-v8a\');
              Tfile.Copy(LJniFiles[j], LJniOutputDir + '\arm64-v8a\' + ALExtractFileNameU(LJniFiles[j]));
            end;
          end;
          if Tdirectory.Exists(LtmpDirectoryLibraries + LLibraries.ValueFromIndex[i] + '\jni\armeabi-v7a') then begin
            var LJniFiles := TDirectory.GetFiles(LtmpDirectoryLibraries + LLibraries.ValueFromIndex[i] + '\jni\armeabi-v7a', '*', TSearchOption.soAllDirectories);
            for var J := Low(LJniFiles) to High(LJniFiles) do begin
              if not ALSameTextU(ALExtractFileExtU(LJniFiles[j]), '.so') then raise Exception.Create('Error F6BF26A7-A378-4A94-A8CB-C861DB38E11E');
              TDirectory.CreateDirectory(LJniOutputDir + '\armeabi-v7a\');
              Tfile.Copy(LJniFiles[j], LJniOutputDir + '\armeabi-v7a\' + ALExtractFileNameU(LJniFiles[j]));
            end;
          end;
        end;

        //make all AndroidManifest ready
        for var I := 0 to LLibraries.Count - 1 do
          MakeAndroidManifestReady(LtmpDirectoryLibraries+LLibraries.ValueFromIndex[i]+'\AndroidManifest.xml');

        //merge resources
        for var I := 0 to LLibraries.Count - 1 do
          MergeResources(
            LtmpDirectoryLibraries+LLibraries.ValueFromIndex[i]+'\res\', // const ASrcDir: String;
            LResOutputDir, // const ADestDir: String;
            ''); // const ASubPath: String

        //create r-apk.jar and r-aab.jar
        for var LApk := False to True do begin
          if not LApk then begin
            CreateRFlata(
              LResOutputDir, // const AMergedResPath: String;
              LRFlataFilename, // const ARFlataPath: String;
              LAapt2Filename);// const AAaptPath: String);
          end;
          //--
          if not AlEmptyDirectoryU(LtmpDirectoryRClass, true{SubDirectory}) then raise EALException.CreateFmt('Cannot clear %s', [LtmpDirectoryRClass]);
          for var I := 0 to LLibraries.Count - 1 do
            CreateRClasses(
              LtmpDirectoryLibraries+LLibraries.ValueFromIndex[i]+'\', // const ALibPath: String;
              ALIfThenU(LApk, LResOutputDir, LRFlataFilename), // const AMergedResPath: String;
              LtmpDirectory, // const ATmpDir: String;
              LtmpDirectoryRJava, // const ARjavaPath: String;
              LtmpDirectoryRClass, // const ARClassPath: String;
              AlIfThenU(LApk, LAaptFilename, LAapt2Filename), // const AAaptPath: String;
              LSDKApiLevelJarFilename, // const ASDKApiLevelJar: String
              LJavacFilename); // const AJavacPath: String
          //--
          CreateRJar(
            LLibsOutputDir + ALIfThenU(LApk, 'r-apk.jar', 'r-aab.jar'), // const aRJarPath: String;
            LtmpDirectoryRClass, // const ARClassPath: String;
            LJarExeFilename); // const AJarPath: String);
        end;

        //create R.Jar
        Var LJarFilename := LLibsOutputDir + 'r.jar';
        if TFile.Exists(LJarFilename) then raise Exception.Create('Error 7FD3D8B3-1565-4897-8943-1519C302875A');
        Tfile.Copy(LLibsOutputDir + 'r-apk.jar', LJarFilename);

        //MergeAndroidManifest
        if LAndroidManifest <> '' then begin
          if not Tfile.Exists(LAndroidManifest) then raise Exception.CreateFmt('%s does not exist', [LAndroidManifest]);
          var LAndroidManifestXmlDoc := TalXmlDocument.Create;
          Var LForceDisabledXmlDoc := TalXmlDocument.Create('root');
          try

            var LManifestSection: AnsiString;
            var LApplicationSection: AnsiString;
            LForceDisabledXmlDoc.DocumentElement.AddChild('application');
            //--
            var LAndroidManifestContent := ALGetStringFromFile(LAndroidManifest);
            if ALPos('%/>', LAndroidManifestContent) > 0 then raise Exception.Create('Error 7FE78AC6-C0C3-41EC-9E7D-8497FDBE644C');
            LAndroidManifestContent := ALStringReplace(LAndroidManifestContent, '%>', '%/>', [rfReplaceALL]);
            LAndroidManifestContent := ALStringReplace(LAndroidManifestContent, '<!-- BEGIN_INCLUDE(manifest) -->', '', [rfReplaceALL]);
            LAndroidManifestContent := ALStringReplace(LAndroidManifestContent, '<!-- END_INCLUDE(manifest) -->', '', [rfReplaceALL]);
            //--
            ExtractAutoGeneratedSectionFromAndroidManifest(
              LAndroidManifestContent,
              LManifestSection,
              LApplicationSection);
            //--
            LForceDisabledXmlDoc.LoadFromXML('<?xml version="1.0" encoding="utf-8"?>'#13#10'<manifest>'+LManifestSection+'<application>'+LApplicationSection+'</application></manifest>');
            for var I := LForceDisabledXmlDoc.DocumentElement.ChildNodes.Count - 1 downto 0 do begin
              Var LNode := LForceDisabledXmlDoc.DocumentElement.ChildNodes[i];
              if Lnode.NodeName = 'application' then continue;
              if (Lnode.NodeType = ntcomment) and
                 (ALpos('!!',ALtrim(Lnode.Text)) = 1) then continue;
              LForceDisabledXmlDoc.DocumentElement.ChildNodes.Delete(i);
            end;
            Var LApplicationNode := LForceDisabledXmlDoc.DocumentElement.ChildNodes.FindNode('application');
            if LApplicationNode = nil then raise Exception.Create('Error 68AD3EFD-969E-4988-9E44-D3E967C5046D');
            for var I := LApplicationNode.ChildNodes.Count - 1 downto 0 do begin
              Var LNode := LApplicationNode.ChildNodes[i];
              if (Lnode.NodeType = ntcomment) and
                 (ALpos('!!',ALtrim(Lnode.Text)) = 1) then continue;
              LApplicationNode.ChildNodes.Delete(i);
            end;
            var LForceDisabledXmlSrc := LForceDisabledXmlDoc.XML;
            LForceDisabledXmlSrc := ALStringReplace(LForceDisabledXmlSrc,'<!-- !!','',[rfReplaceALL]);
            LForceDisabledXmlSrc := ALStringReplace(LForceDisabledXmlSrc,'<!--!!','',[rfReplaceALL]);
            LForceDisabledXmlSrc := ALStringReplace(LForceDisabledXmlSrc,'!! -->','',[rfReplaceALL]);
            LForceDisabledXmlSrc := ALStringReplace(LForceDisabledXmlSrc,'!!-->','',[rfReplaceALL]);
            LForceDisabledXmlSrc := ALStringReplace(LForceDisabledXmlSrc,'-->','',[rfReplaceALL]);
            LForceDisabledXmlDoc.LoadFromXML(LForceDisabledXmlSrc);
            //--
            LAndroidManifestXmlDoc.Options := [DoNodeAutoIndent, doAttributeAutoIndent];
            LAndroidManifestXmlDoc.LoadFromXML(LAndroidManifestContent);
            //--
            LApplicationNode := LAndroidManifestXmlDoc.DocumentElement.ChildNodes.FindNode('application');
            if LApplicationNode = nil then raise Exception.Create('Broken AndroidManifest file');
            //--
            LAndroidManifestXmlDoc.DocumentElement.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionBeginSeparator+' '));
            LAndroidManifestXmlDoc.DocumentElement.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionBeginText+' '));
            LAndroidManifestXmlDoc.DocumentElement.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionBeginSeparator+' '));
            //--
            LApplicationNode.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionBeginSeparator+' '));
            LApplicationNode.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionBeginText+' '));
            LApplicationNode.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionBeginSeparator+' '));
            //--
            for var I := 0 to LLibraries.Count - 1 do
              MergeAndroidManifest(
                LtmpDirectoryLibraries+LLibraries.ValueFromIndex[i]+'\AndroidManifest.xml.original', // const ASrcFilename: String;
                LAndroidManifestXmlDoc, // const ADestXmlDoc: TalXmlDocument;
                LForceDisabledXmlDoc); // const AForceDisabledXmlDoc: TalXmlDocument
            //--
            Var LBreakLineNode := TALXmlElementNode.Create('br');
            LAndroidManifestXmlDoc.DocumentElement.ChildNodes.Add(LBreakLineNode);
            LAndroidManifestXmlDoc.DocumentElement.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionEndSeparator+' '));
            LAndroidManifestXmlDoc.DocumentElement.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionEndText+' '));
            LAndroidManifestXmlDoc.DocumentElement.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionEndSeparator+' '));
            LAndroidManifestXmlDoc.DocumentElement.ChildNodes.Remove(LBreakLineNode);
            //--
            LBreakLineNode := TALXmlElementNode.Create('br');
            LApplicationNode.ChildNodes.Add(LBreakLineNode);
            LApplicationNode.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionEndSeparator+' '));
            LApplicationNode.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionEndText+' '));
            LApplicationNode.ChildNodes.Add(TALXmlCommentNode.Create(' '+AutoGeneratedSectionEndSeparator+' '));
            LApplicationNode.ChildNodes.Remove(LBreakLineNode);
            //--
            LAndroidManifestContent := LAndroidManifestXmlDoc.XML;
            ExtractAutoGeneratedSectionFromAndroidManifest(
              LAndroidManifestContent,
              LManifestSection,
              LApplicationSection);
            LAndroidManifestContent := ALGetStringFromFile(LAndroidManifest);
            AddAutoGeneratedSectionFromAndroidManifest(
              LAndroidManifestContent,
              LManifestSection,
              LApplicationSection);
            //--
            Tfile.Delete(LAndroidManifest);
            ALSaveStringToFile(LAndroidManifestContent, LAndroidManifest);
          finally
            ALFreeAndNil(LAndroidManifestXmlDoc);
            ALFreeAndNil(LForceDisabledXmlDoc);
          end;
        end;

        //update dproj
        var LdprojXmlDoc := TalXmlDocument.Create('root');
        try

          //init LdprojXmlDoc
          LdprojXmlDoc.LoadFromFile(LDProjFilename);

          //init LProjectExtensionsNode
          var LProjectExtensionsNode := LDProjXmlDoc.DocumentElement.ChildNodes.FindNode('ProjectExtensions');
          if LProjectExtensionsNode = nil then raise Exception.Create('ProjectExtensions node not found!');

          //init LBorlandProjectNode
          var LBorlandProjectNode := LProjectExtensionsNode.ChildNodes.FindNode('BorlandProject');
          if LBorlandProjectNode = nil then raise Exception.Create('ProjectExtensions.BorlandProject node not found!');

          //init LDeploymentNode
          var LDeploymentNode := LBorlandProjectNode.ChildNodes.FindNode('Deployment');
          if LDeploymentNode = nil then raise Exception.Create('ProjectExtensions.BorlandProject.Deployment node not found!');

          //remove from deployment all items deployed to "res\", "library\lib\arm64-v8a\" and "library\lib\armeabi-v7a\" remote folder
          //<DeployFile LocalName="android\res\drawable\common_google_signin_btn_icon_disabled.xml" Configuration="Release" Class="File">
          //    <Platform Name="Android">
          //        <RemoteDir>res\drawable</RemoteDir>
          //        <RemoteName>common_google_signin_btn_icon_disabled.xml</RemoteName>
          //        <Overwrite>true</Overwrite>
          //    </Platform>
          //    <Platform Name="Android64">
          //        <RemoteDir>res\drawable</RemoteDir>
          //        <RemoteName>common_google_signin_btn_icon_disabled.xml</RemoteName>
          //        <Overwrite>true</Overwrite>
          //    </Platform>
          //</DeployFile>
          //<DeployFile LocalName="..\..\..\..\..\Alcinoe\lib\jar\org.webrtc\jni\arm64-v8a\libjingle_peerconnection_so.so" Configuration="Release" Class="File">
          //    <Platform Name="Android">
          //        <RemoteDir>library\lib\arm64-v8a\</RemoteDir>
          //        <RemoteName>libjingle_peerconnection_so.so</RemoteName>
          //        <Overwrite>true</Overwrite>
          //    </Platform>
          //    <Platform Name="Android64">
          //        <RemoteDir>library\lib\arm64-v8a\</RemoteDir>
          //        <RemoteName>libjingle_peerconnection_so.so</RemoteName>
          //        <Overwrite>true</Overwrite>
          //    </Platform>
          //</DeployFile>
          for var I := LDeploymentNode.ChildNodes.Count - 1 downto 0 do begin
            var LDeployFileNode := LDeploymentNode.ChildNodes[i];
            if (ALSameText(LDeployFileNode.NodeName, 'DeployFile') and
                ALSameText(LDeployFileNode.Attributes['Class'], 'File')) then begin
              if LDeployFileNode.ChildNodes.Count = 0 then raise Exception.Create('Error A892E02E-A8BA-4003-AEF1-A81271AD0A9F');
              for Var J := LDeployFileNode.ChildNodes.Count - 1 downto 0 do begin
                var LPlatformNode := LDeployFileNode.ChildNodes[j];
                if not alSameText(LPlatformNode.NodeName, 'Platform') then raise Exception.Create('Error 65714071-86F2-4796-82F8-9F01C5C9824B');
                var LName := LPlatformNode.Attributes['Name'];
                if LName = '' then raise Exception.Create('Error 42C3C299-BA31-4B17-9EA4-8320E0048848');
                if (alSameText(LName, 'Android')) or
                   (alSameText(LName, 'Android64')) then begin
                  Var LremoteDirNode := LPlatformNode.ChildNodes.FindNode('RemoteDir');
                  if LremoteDirNode = nil then raise Exception.Create('Error 5427D8C2-7CC9-45DA-94A2-51B036B7BB50');
                  if (alposExIgnoreCase('res\', LremoteDirNode.Text) = 1) or
                     (alposExIgnoreCase('library\lib\arm64-v8a\', LremoteDirNode.Text) = 1) or
                     (alposExIgnoreCase('library\lib\armeabi-v7a\', LremoteDirNode.Text) = 1) then begin
                    LDeployFileNode.ChildNodes.Delete(j);
                    continue;
                  end;
                end;
              end;
              if LDeployFileNode.ChildNodes.Count = 0 then
                LDeploymentNode.ChildNodes.Delete(i);
            end;
          end;

          //add to deployment all items from local res\ folder
          var LResFiles := TDirectory.GetFiles(LResOutputDir, '*', TSearchOption.soAllDirectories); // c:\....Android\Merged\res\drawable\common_google_signin_btn_icon_disabled.xml
          var LResRelativePath := ansiString(ExtractRelativePath(LDProjDir, LResOutputDir)); // Android\Merged\res\
          for Var I := Low(LResFiles) to High(LResFiles) do begin
            Var LLocalName := AnsiString(ExtractRelativePath(LDProjDir, LResFiles[i])); // Android\Merged\res\drawable\common_google_signin_btn_icon_disabled.xml
            for var LConfig in LConfigs do begin
              With LDeploymentNode.AddChild('DeployFile') do begin
                Attributes['LocalName'] := LLocalName;
                Attributes['Configuration'] := LConfig;
                Attributes['Class'] := 'File';
                for var LPlatForm in LPlatforms do begin
                  With AddChild('Platform') do begin
                    Attributes['Name'] := LPlatForm;
                    Addchild('RemoteDir').Text := 'res\' + ALStringReplace(ALExcludeTrailingPathDelimiter(ALExtractFilePath(LLocalName)), LResRelativePath, '', [rfIgnoreCase]);
                    Addchild('RemoteName').Text := ALExtractFileName(LLocalName);
                    Addchild('Overwrite').Text := 'true';
                  end;
                end;
              end;
            end;
          end;

          //add to deployment all items from local jni\ folder
          var LJniFiles := TDirectory.GetFiles(LJniOutputDir, '*', TSearchOption.soAllDirectories); // c:\....Android\Merged\jni\arm64-v8a\libjingle_peerconnection_so.so
          var LJniRelativePath := ansiString(ExtractRelativePath(LDProjDir, LJniOutputDir)); // Android\Merged\jni\
          for Var I := Low(LJniFiles) to High(LJniFiles) do begin
            Var LLocalName := AnsiString(ExtractRelativePath(LDProjDir, LJniFiles[i])); // Android\Merged\jni\arm64-v8a\libjingle_peerconnection_so.so
            for var LConfig in LConfigs do begin
              With LDeploymentNode.AddChild('DeployFile') do begin
                Attributes['LocalName'] := LLocalName;
                Attributes['Configuration'] := LConfig;
                Attributes['Class'] := 'File';
                for var LPlatForm in LPlatforms do begin
                  With AddChild('Platform') do begin
                    Attributes['Name'] := LPlatForm;
                    Addchild('RemoteDir').Text := 'library\lib\' + ALStringReplace(ALExcludeTrailingPathDelimiter(ALExtractFilePath(LLocalName)), LJniRelativePath, '', [rfIgnoreCase]); // library\lib\arm64-v8a\libjingle_peerconnection_so.so
                    Addchild('RemoteName').Text := ALExtractFileName(LLocalName);
                    Addchild('Overwrite').Text := 'true';
                  end;
                end;
              end;
            end;
          end;

          //init LItemGroupNode
          var LItemGroupNode := LDProjXmlDoc.DocumentElement.ChildNodes.FindNode('ItemGroup');
          if LItemGroupNode = nil then raise Exception.Create('ItemGroup node not found!');

          //remove from ItemGroup all JavaReference
          //<JavaReference Include="..\..\..\libraries\jar\android.arch.core\arch-core-common.jar">
          //  <Disabled/>
          //</JavaReference>
          for var I := LItemGroupNode.ChildNodes.Count - 1 downto 0 do begin
            var LJavaReferenceNode := LItemGroupNode.ChildNodes[i];
            if ALSameText(LJavaReferenceNode.NodeName, 'JavaReference') then
              LItemGroupNode.ChildNodes.Delete(i);
          end;

          //add to ItemGroup all items from local libs\ folder
          var LLibsFiles := TDirectory.GetFiles(LLibsOutputDir, '*', TSearchOption.soAllDirectories); // c:\....android\libs\r.jar
          var LLibsRelativePath := ansiString(ExtractRelativePath(LDProjDir, LLibsOutputDir)); // android\libs\
          for Var I := Low(LLibsFiles) to High(LLibsFiles) do begin
            if ALSameTextU(AlExtractFilenameU(LLibsFiles[i]), 'r-apk.jar') or
               ALSameTextU(AlExtractFilenameU(LLibsFiles[i]), 'r-aab.jar') then continue;
            if not ALSameTextU(AlExtractFileExtU(LLibsFiles[i]),'.jar') then raise Exception.Create('Error E88BE4F0-B6E5-4EC4-B890-B9B6169FC58B');
            Var LLocalName := AnsiString(ExtractRelativePath(LDProjDir, LLibsFiles[i])); // android\libs\r.jar
            With LItemGroupNode.AddChild('JavaReference') do Attributes['Include'] := LLocalName;
          end;

          //add the RJarSwapper command line
          if LRJarSwapper <> '' then begin
            for var I := 0 to LdprojXmlDoc.DocumentElement.ChildNodes.Count - 1 do begin
              var LPropertyGroupNode := LdprojXmlDoc.DocumentElement.ChildNodes[i];
              if LPropertyGroupNode.NodeName = 'PropertyGroup' then begin
                var LCondition := LPropertyGroupNode.Attributes['Condition'];
                if (ALposExIgnoreCase('Android', LCondition) > 0) or
                   (ALposExIgnoreCase('Android64', LCondition) > 0) then begin
                  Var LPreBuildEventNode := LPropertyGroupNode.ChildNodes.FindNode('PreBuildEvent');
                  var LPreBuildEventXml: ansiString := '';
                  if (LPreBuildEventNode <> nil) then LPreBuildEventNode.SaveToXML(LPreBuildEventXml, true{SaveOnlyChildNodes});
                  if (LPreBuildEventXml <> '') and
                     (alposExIgnoreCase('RJarSwapper.bat', LPreBuildEventXml) <= 0) then
                    raise Exception.Create('Cannot set RJarSwapper.bat in PreBuildEvent because it''s not empty');
                  if LPreBuildEventNode <> nil then LPropertyGroupNode.ChildNodes.Remove(LPreBuildEventNode);
                  Var LIndex := LPropertyGroupNode.ChildNodes.IndexOf('PostBuildEventCancelOnError');
                  if LIndex >= 0 then LPropertyGroupNode.ChildNodes.Delete(LIndex);
                  LIndex := LPropertyGroupNode.ChildNodes.IndexOf('PostBuildEventExecuteWhen');
                  if LIndex >= 0 then LPropertyGroupNode.ChildNodes.Delete(LIndex);
                  if ALSameText(LCondition, '''$(Base_Android)''!=''''') or
                     ALSameText(LCondition, '''$(Base_Android64)''!=''''') then begin
                    LPropertyGroupNode.AddChild('PreBuildEvent').Text := '"'+AnsiString(LRJarSwapper)+'" -RJarDir="'+ansiString(LDProjFilename)+'" -BuildType="$(BT_BuildType)"';
                  end;
                end;
              end;
            end;
          end;

          //save LdprojXmlDoc
          var LDprojXmlSrc: AnsiString;
          LdprojXmlDoc.SaveToXML(LDprojXmlSrc);
          LdprojXmlDoc.Options := [doNodeAutoIndent];
          LdprojXmlDoc.LoadFromXML(LDprojXmlSrc);
          LdprojXmlDoc.SaveToFile(LDProjFilename);

          //normalize the LdprojXmlDoc
          if LDProjNormalizer <> '' then
            ExecuteCmdLine('"'+LDProjNormalizer+'" "' +LDProjFilename + '" false');

        finally
          ALFreeAndNil(LdprojXmlDoc);
        end;

      finally
        ALFreeAndNil(LParamLst);
        ALFreeAndNil(LLibraries);
        ALFreeAndNil(LConfigs);
        ALFreeAndNil(LPlatforms);
      end;

    finally
      AlEmptyDirectoryU(LtmpDirectory, true{SubDirectory});
      Tdirectory.Delete(LtmpDirectory);
    end;

    Writeln('');
    Writeln('Merge successful');
    Writeln('Press any key to exit');
    Readln;

  except
    on E: Exception do begin
      Writeln(E.ClassName, ': ', E.Message);
      Writeln('Usage:');
      Writeln('  AndroidMerger.exe');
      Writeln('    -Libraries: Paths to aar libraries or directories or dproj. Separate paths with '';''.');
      Writeln('    -OutputDir: Path where all libraries will be merged.');
      Writeln('    -DProj: Path to the project file (*.dproj).');
      Writeln('    -AndroidManifest: Path to the AndroidManifest.template.xml of the project.');
      Writeln('    -DProjNormalizer: Path to the DProjNormalizer tool.');
      Writeln('    -RJarSwapper: Path to the RJarSwapper tool.');
      Writeln('    -NoInteraction: Non-interactive mode.');
      Writeln('');
      Writeln('Example:');
      Writeln('  AndroidMerger.exe^');
      Writeln('    -Libraries=c:\MyLibs\facebook-share-5.15.1.aar;c:\mylibs\af-android-sdk.jar;c:\mylibs\MyLib\;c:\mylibs\af-android-sdk.jar^');
      Writeln('    -OutputDir=c:\MyProject\android\merged^');
      Writeln('    -DProj=c:\MyProject\myproject.dproj^');
      Writeln('    -AndroidManifest=c:\MyProject\AndroidManifest.template.xml^');
      Writeln('    -DProjNormalizer=c:\Alcinoe\Tools\DeployProjNormalizer\DeployProjNormalizer.exe^');
      Writeln('    -RJarSwapper:c:\Alcinoe\Tools\RJarSwapper\RJarSwapper.bat');
      Writeln('');
      Writeln('');
      Writeln('Merge failed!');
      Writeln('Press any key to exit');
      Readln;
      halt(1);
    end;
  end;
end.
